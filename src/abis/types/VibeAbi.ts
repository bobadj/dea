/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type PostStruct = {
  timestamp: BigNumberish;
  owner: string;
  text: string;
};

export type PostStructOutput = [BigNumber, string, string] & {
  timestamp: BigNumber;
  owner: string;
  text: string;
};

export interface VibeAbiInterface extends utils.Interface {
  functions: {
    "createPost(string)": FunctionFragment;
    "deletePost(uint256)": FunctionFragment;
    "fetchPostsRanged(uint256,uint256)": FunctionFragment;
    "getLatestPostID()": FunctionFragment;
    "getPost(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "posts(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sponsorPost(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "createPost", values: [string]): string;
  encodeFunctionData(
    functionFragment: "deletePost",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchPostsRanged",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestPostID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPost",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "posts", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sponsorPost",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "createPost", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deletePost", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fetchPostsRanged",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestPostID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPost", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "posts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sponsorPost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "PostCreated(uint256,address,string)": EventFragment;
    "PostDeleted(uint256)": EventFragment;
    "PostSponsored(uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PostCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PostDeleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PostSponsored"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PostCreatedEvent = TypedEvent<
  [BigNumber, string, string],
  { postID: BigNumber; owner: string; text: string }
>;

export type PostCreatedEventFilter = TypedEventFilter<PostCreatedEvent>;

export type PostDeletedEvent = TypedEvent<[BigNumber], { postID: BigNumber }>;

export type PostDeletedEventFilter = TypedEventFilter<PostDeletedEvent>;

export type PostSponsoredEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  { postID: BigNumber; sponsorAmount: BigNumber; sponsor: string }
>;

export type PostSponsoredEventFilter = TypedEventFilter<PostSponsoredEvent>;

export interface VibeAbi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VibeAbiInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createPost(
      text: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deletePost(
      postID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fetchPostsRanged(
      start: BigNumberish,
      numOfPosts: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[PostStructOutput[]]>;

    getLatestPostID(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPost(
      postID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[PostStructOutput]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    posts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string] & {
        timestamp: BigNumber;
        owner: string;
        text: string;
      }
    >;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sponsorPost(
      postID: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  createPost(
    text: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deletePost(
    postID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fetchPostsRanged(
    start: BigNumberish,
    numOfPosts: BigNumberish,
    overrides?: CallOverrides
  ): Promise<PostStructOutput[]>;

  getLatestPostID(overrides?: CallOverrides): Promise<BigNumber>;

  getPost(
    postID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<PostStructOutput>;

  owner(overrides?: CallOverrides): Promise<string>;

  posts(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string] & {
      timestamp: BigNumber;
      owner: string;
      text: string;
    }
  >;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sponsorPost(
    postID: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createPost(text: string, overrides?: CallOverrides): Promise<void>;

    deletePost(postID: BigNumberish, overrides?: CallOverrides): Promise<void>;

    fetchPostsRanged(
      start: BigNumberish,
      numOfPosts: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PostStructOutput[]>;

    getLatestPostID(overrides?: CallOverrides): Promise<BigNumber>;

    getPost(
      postID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PostStructOutput>;

    owner(overrides?: CallOverrides): Promise<string>;

    posts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string] & {
        timestamp: BigNumber;
        owner: string;
        text: string;
      }
    >;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    sponsorPost(postID: BigNumberish, overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "PostCreated(uint256,address,string)"(
      postID?: null,
      owner?: string | null,
      text?: null
    ): PostCreatedEventFilter;
    PostCreated(
      postID?: null,
      owner?: string | null,
      text?: null
    ): PostCreatedEventFilter;

    "PostDeleted(uint256)"(postID?: null): PostDeletedEventFilter;
    PostDeleted(postID?: null): PostDeletedEventFilter;

    "PostSponsored(uint256,uint256,address)"(
      postID?: null,
      sponsorAmount?: null,
      sponsor?: string | null
    ): PostSponsoredEventFilter;
    PostSponsored(
      postID?: null,
      sponsorAmount?: null,
      sponsor?: string | null
    ): PostSponsoredEventFilter;
  };

  estimateGas: {
    createPost(
      text: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deletePost(
      postID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fetchPostsRanged(
      start: BigNumberish,
      numOfPosts: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLatestPostID(overrides?: CallOverrides): Promise<BigNumber>;

    getPost(
      postID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    posts(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sponsorPost(
      postID: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createPost(
      text: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deletePost(
      postID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fetchPostsRanged(
      start: BigNumberish,
      numOfPosts: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLatestPostID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPost(
      postID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    posts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sponsorPost(
      postID: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
